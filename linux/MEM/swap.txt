内存资源紧张时，系统如何应对？
内存回收和OOM杀死进程

OOM(Out Of Memory)：系统杀死占用大量内存的进程，释放这些内存，再分配给其它需要的进程。

内存回收：系统释放掉可以回收的内存(缓存和缓冲区),通常叫做文件页(File-backed Page)。

----------------------
1.大部分文件页都可以直接回收，需要时再从磁盘读取。
2.被程序修改过还没写入磁盘的数据（脏页），先写入磁盘才能进行内存释放。
	脏页写入磁盘方式：
	1.用过系统调用fsync，把脏页同步到磁盘；
	2.由内核线程pdbush刷新脏页；
3.除了缓存和缓冲区，通过内存映射获取的文件映射页，也可以回收。
-----------------------

除了文件页，应用程序动态分配的堆内存，也就是我们在内存管理中说到的匿名页（Anonymous Page），是不是也可以回收呢？

这类内存可能会被再次访问，应当不回收，但是很少被访问也是一种资源浪费。
可以先存到磁盘，释放内存给其它的进程。
这其实正是SWAP机制！

Swap把这些不常访问的内存先写到磁盘中，然后释放这些内存，给其他更需要的进程使用。再次访问这些内存时，重新从磁盘读入内存就可以了。

======================

SWAP就是把一块磁盘空间或者一个本地文件（以下讲解以磁盘为例），当成内存来使用。

它包括换出和换入两个过程：
	换出，就是把进程暂时不用的内存数据存储到磁盘中，并释放这些数据占用的内存。
	换入，则是在进程再次访问这些内存的时候，把它们从磁盘读到内存中来。

直接内存回收：
	有新的大块内存分配请求，但是剩余内存不足。这个时候系统就需要回收一部分内存（比如前面提到的缓存），进而尽可能地满足新内存请求。

定期内存回收：
	由内核线程负责，kswapd0。

kswapd0定义了三个内存阈值（watermark，也称为水位）：
	页最小阈值（pages_min） /proc/sys/vm/min_free_kbytes
	页低阈值（pages_low）   pages_low = pages_min*5/4
	页高阈值（pages_high）  pages_high = pages_min*3/2
	剩余内存， pages_free 
剩余内存低于页低阈值就会触发内存回收。

==========================

NUMA与Swap

为什么剩余内存很多的情况下，也会发生 Swap 呢？
这正是处理器的 NUMA （Non-Uniform Memory Access）架构导致的。
在 NUMA 架构下，多个处理器被划分到不同 Node 上，且每个 Node 都拥有自己的本地内存空间。

而同一个 Node 内部的内存空间，实际上又可以进一步分为不同的内存域（Zone），比如直接内存访问区（DMA）、普通内存区（NORMAL）、伪内存区（MOVABLE）等；
在分析内存的使用时，我们也应该针对每个 Node 单独分析

通过 numactl 命令，来查看处理器在 Node 的分布情况，以及每个 Node 的内存使用情况：
numactl --hardware

前面提到的三个内存阈值（页最小阈值、页低阈值和页高阈值），
都可以通过内存域在 proc 文件系统中的接口 /proc/zoneinfo 来查看

====================================

在内存资源紧张时，Linux通过直接内存回收和定期扫描的方式，来释放文件页和匿名页，以便把内存分配给更需要的进程使用。

文件页的回收比较容易理解，直接清空，或者把脏数据写回磁盘后再释放。

而对匿名页的回收，需要通过Swap换出到磁盘中，下次访问时，再从磁盘换入到内存中。

你可以设置/proc/sys/vm/min_free_kbytes，来调整系统定期回收内存的阈值（也就是页低阈值），还可以设置/proc/sys/vm/swappiness，来调整文件页和匿名页的回收倾向。

在 NUMA 架构下，每个 Node 都有自己的本地内存空间，而当本地内存不足时，默认既可以从其他 Node 寻找空闲内存，也可以从本地内存回收。

你可以设置 /proc/sys/vm/zone_reclaim_mode ，来调整NUMA本地内存的回收策略。

==============================

开启swap

# 创建Swap文件
$ fallocate -l 8G /mnt/swapfle
# 修改权限只有根用户可以访问
$ chmod 600 /mnt/swapfle
# 配置Swap文件
$ mkswap /mnt/swapfle
# 开启Swap
$ swapon /mnt/swapfle







